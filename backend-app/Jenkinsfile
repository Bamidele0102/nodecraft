pipeline {
    agent any

    tools {
        nodejs 'NodeJS 16'  // Ensure NodeJS 16 is installed in Jenkins
    }

    environment {
        // Pull sensitive data from Jenkins credentials
        MONGO_URI = credentials('MONGO_URI')
        JWT_SECRET = credentials('JWT_SECRET')
        PORT = '3000'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/Bamidele0102/nodecraft.git'
            }
        }

        stage('Navigate to Backend Directory') {
            steps {
                dir('backend-app') {
                    echo 'Navigated to backend-app directory'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('backend-app') {
                    // Set npm registry and increase timeout
                    sh 'npm config set registry https://registry.npmjs.org/'
                    sh 'npm config set fetch-timeout 60000'

                    // Install Node.js dependencies
                    echo 'Starting npm install...'
                    timeout(time: 20, unit: 'MINUTES') {
                        sh 'npm install'
                    }

                    // Verify that Mocha is installed
                    echo 'Verifying Mocha installation...'
                    sh 'npx mocha --version || npm install mocha'
                }
            }
        }

        stage('Run Unit and Integration Tests') {
            steps {
                dir('backend-app') {
                    // Run both unit and integration tests using npx to ensure Mocha is found
                    timeout(time: 10, unit: 'MINUTES') {
                        sh 'npx mocha --timeout 20000 "tests/**/*.test.mjs" "tests/**/*.test.js"'
                    }
                }
            }

            post {
                always {
                    dir('backend-app') {
                        junit 'test-results/*.xml' // Adjust this path as needed
                    }
                }
                failure {
                    error "Tests failed. Aborting build."
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    // Calculate major and minor versions
                    def majorVersion = (env.BUILD_NUMBER.toInteger() / 10).toInteger() + 1
                    def minorVersion = env.BUILD_NUMBER.toInteger() % 10
                    env.IMAGE_VERSION = "v${majorVersion}.${minorVersion}"
                    
                    // Build Docker image with dynamic versioning
                    dockerImage = docker.build("bamidele0102/backend-app:${env.IMAGE_VERSION}")
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        dockerImage.push(env.IMAGE_VERSION)
                    }
                }
            }
        }

        stage('Deploy to Production Server') {
            steps {
                sshagent(credentials: ['your-ssh-credentials-id']) {
                    sh """
                    ssh -o StrictHostKeyChecking=no user@100.25.28.252 << EOF
                    docker pull bamidele0102/backend-app:${env.IMAGE_VERSION}
                    docker stop backend-app || true
                    docker rm backend-app || true
                    docker run -d --name your-nodejs-app -p 3000:3000 --env-file .env bamidele0102/backend-app:${env.IMAGE_VERSION}
                    EOF
                    """
                }
            }
        }
    }

    post {
        success {
            emailext (
                subject: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """
                Good news! The build succeeded.
                - Job: ${env.JOB_NAME}
                - Build Number: ${env.BUILD_NUMBER}
                - Build URL: ${env.BUILD_URL}
                """,
                to: "idowu.olayiwola.bamidele@gmail.com,victorgavon@gmail.com",
            )
        }

        failure {
            emailext (
                subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """
                Unfortunately, the build failed.
                - Job: ${env.JOB_NAME}
                - Build Number: ${env.BUILD_NUMBER}
                - Build URL: ${env.BUILD_URL}
                """,
                to: "idowu.olayiwola.bamidele@gmail.com,victorgavon@gmail.com",
            )
        }
    }
}
