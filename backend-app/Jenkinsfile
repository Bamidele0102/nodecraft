pipeline {
    agent any

    tools {
        nodejs 'NodeJS 14'  // Ensure NodeJS 14 is installed in Jenkins
    }

    environment {
        // Use Jenkins credentials for sensitive information
        MONGO_URI = credentials('MONGO_URI')
        JWT_SECRET = credentials('JWT_SECRET')
        PORT = '3000'
        PATH = "${env.PATH}:${env.WORKSPACE}/backend-app/node_modules/.bin"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/Bamidele0102/nodecraft.git'
            }
        }

        stage('Navigate to Backend Directory') {
            steps {
                dir('backend-app') {
                    echo 'Navigated to backend-app directory'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                dir('backend-app') {
                    script {
                        echo 'Starting npm install...'
                        sh 'npm install'

                        // Verify node_modules installation
                        echo 'Verifying node_modules installation...'
                        sh 'ls -la node_modules || echo "node_modules not found"'
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                dir('backend-app') {
                    script {
                        // Use withCredentials to securely handle sensitive data
                        withCredentials([
                            string(credentialsId: 'MONGO_URI', variable: 'MONGO_URI'),
                            string(credentialsId: 'JWT_SECRET', variable: 'JWT_SECRET')
                        ]) {
                            def majorVersion = (env.BUILD_NUMBER.toInteger() / 10).toInteger() + 1
                            def minorVersion = env.BUILD_NUMBER.toInteger() % 10
                            env.IMAGE_VERSION = "v${majorVersion}.${minorVersion}"
                            
                            // Correctly format the docker build command with build arguments
                            dockerImage = docker.build("bamidele0102/backend-app:${env.IMAGE_VERSION}", 
                                                        "--build-arg MONGO_URI=${MONGO_URI} --build-arg JWT_SECRET=${JWT_SECRET} .")
                        }
                    }
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'docker-hub-credentials') {
                        dockerImage.push(env.IMAGE_VERSION)
                    }
                }
            }
        }

        stage('Deploy to Production Server') {
            steps {
                dir('backend-app') {
                    sshagent(credentials: ['your-ssh-credentials-id']) {
                        sh """
                        ssh -o StrictHostKeyChecking=no ubuntu@100.25.28.252 << EOF
                        docker pull bamidele0102/backend-app:${env.IMAGE_VERSION}
                        docker stop backend-app || true
                        docker rm backend-app || true
                        docker run -d --name backend-app -p 3000:3000 --env-file .env bamidele0102/backend-app:${env.IMAGE_VERSION}
                        EOF
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            emailext (
                subject: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """
                Good news! The build succeeded.
                - Job: ${env.JOB_NAME}
                - Build Number: ${env.BUILD_NUMBER}
                - Build URL: ${env.BUILD_URL}
                """,
                to: "idowu.olayiwola.bamidele@gmail.com,victorgavon@gmail.com"
            )
        }

        failure {
            emailext (
                subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: """
                Unfortunately, the build failed.
                - Job: ${env.JOB_NAME}
                - Build Number: ${env.BUILD_NUMBER}
                - Build URL: ${env.BUILD_URL}
                """,
                to: "idowu.olayiwola.bamidele@gmail.com,victorgavon@gmail.com"
            )
        }
    }
}
